// programm units

// time 1 = 10^-3 sec   
// space: 1 = 10^-6 m
// mass: 1 = 10^-15 kg

#define _CRT_SECURE_NO_WARNINGS
//#include <immintrin.h>
//#include "stdafx.h"
#include <iostream>
#include "Tchar.h"
#include "time.h"
#include "ctime"
#include <chrono> //for different radius

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>  
#include <conio.h>
#include <random> //for different radius
#include "omp.h"


int BigRand()
{
	assert(INT_MAX / (RAND_MAX + 1) > RAND_MAX);
	return rand() * (RAND_MAX + 1) + rand();
}


int _tmain(int argc, _TCHAR* argv[])
{
	unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();

	std::default_random_engine generator(seed);
	std::normal_distribution<double> distribution(0, 1.0);
	//these three lines are for different radius

	srand(time(NULL));                   // random seed (if commented, the same sequence of psuedorandom numbers will be used

	using namespace std;
	FILE* ou = fopen("data_out.txt", "w");     //  coordinates of spheres for ParticleVis
	FILE* ouu = fopen("colormap.txt", "w");        //  data on colors of spheres
	FILE* par = fopen("param.txt", "w");     // parameters
	FILE* coord1 = fopen("last_coord1.txt", "w"); // all files starting with "last" record the last coordinates of the particles, which can be used ..
	FILE* coord2 = fopen("last_coord2.txt", "w"); // .. to continue modeling when writing the corresponding program block.
	FILE* vels = fopen("last_vels.txt", "w");
	FILE* time1 = fopen("last_timest.txt", "w");
	FILE* time2 = fopen("last_timestsp.txt", "w");
	FILE* cloning = fopen("last_cloned.txt", "w");


	FILE* height = fopen("param_height.txt", "w"); // three files can be used to analyze the growth of a blood clot
	FILE* width = fopen("param_width.txt", "w");
	FILE* quantity = fopen("param_quantity.txt", "w");
	FILE* trombuspower = fopen("trombuspower.txt", "w");
	FILE* secondlayer = fopen("SLayer.txt", "w");

	FILE* particles = fopen("last_particles.txt", "w");

	FILE* spring_f = fopen("spring.txt", "w"); // these four files record the numerical values of the forces that arise. It was necessary to analyze the parameters
	FILE* MorseF1 = fopen("MorseF1.txt", "w"); // important! Writing to these files is less frequent, because if the simulation is over long periods of time, the files will be very heavy
	FILE* MorseF2 = fopen("MorseF2.txt", "w");
	FILE* repulsion = fopen("repulsion.txt", "w");


	FILE* totalstrength = fopen("total_strength.txt", "w");

	printf("rand_max: %d \n ", RAND_MAX);

	const int N = 1000;				 // total number of spheres in the system

	const int Nfreemax = 10;        // concentration of platelets in the simulation volume

	const int ploschpar = 5; // side of the square - to determine the area of injury
	const double ploschpar1 = double(ploschpar);
	const int yak = ploschpar * ploschpar;      		 // number of plts fixed in the vessel wall (injury)

	double FxX, FxX_true;				//total forces acting on a blood clot

	double xyakstart = 40;      		// the x-position of the first of the fixed plts

	int actN = yak;						// current number of plts in a simulation

	const long int T = 200000000;		// total number of timesteps        
	const long int tfin = T;			// when flow will be stopped
	double dt = 0.0001;					//  time step -> implementation time = Т*dt/1000

	const int nfac = 20000;				//  the period (in number of time steps) of writing data to the file
	const double nfac2 = double(nfac);
	const double nfac22 = double(2 * nfac);
	const double nfac3 = 1000000;		//  the period (in number of time steps) of writing data to the files with forses

	double kmorse = 10000;				// amplitude of the plt-plt interaction (scaling coef. in Morse potential)
	int c = 20;
	double damp_fac = 0.00001;			//damping factor  

	double tact1 = 1000000;             // timesteps of the activation 1
	long tact2 = 1000000;				// timesteps of the activation 2

	double tactscale1 = 1000000; 

	double actf1 = 5;

	int SLayer = 0;

	const int nco = 140000;				//this is the size of the matrix for recording Morse forces. If the calculation is long and a lot of effort, it is necessary to increase it
	const int recalc = 500;             // !

	const int X = 150;                  //  size of the simulation domain (x - along the flow)
	const int Y = 50;                   //  height
	const int Z = 50;					//  width

	double liambda = 0.5;

	const double R = 1;							//	particle radius


	double kk = 1000000;                        //  particle stiffness constant (to describe their repulsion from each other)
	double l0 = 2 * R;
	double kadh = 850000;   //!!!!				//  the constant of elastic repulsion of particles from the lower wall
	double kstenk = 550000;	//!!!				//  the constant of elastic repulsion from the wall 

	fprintf(par, "Time= %g sec; dt= %g ms; N= %i ; we write data into file every %i ms; X= %i mkm; Y= %i mkm; Z= %i mkm; R= %g mkm; yak= %i ; \n", double(T * dt / 1000), dt, N, int(nfac * dt), X, Y, Z, R, yak);   // файл с основными параметрами 
	fprintf(par, "kk of platelets = %g nN;  kadh = %g nN/mkm; kstenk = %g nN/mkm; \n", double(kk * 0.000001), double(kadh * 0.000001), double(kstenk * 0.000001));
	fprintf(par, "kmorse = %g nN; c = %i mkm-1; time for activation = %g ms ; max actfactor = %g; tactscale = %g \n", double(kmorse * 0.000001), c, double(tact1 * dt), actf1, double(tactscale1 * dt / 1000));
	fprintf(par, "dampinf factor = %g\n", damp_fac);

	const double r_max = 1073741824;

	double x[N];                           // initial coordinates of the particles
	double y[N];
	double z[N];


	double actfactor[N];

	bool activPlat[N];

	bool cloned[N];                   //  has a platelet been "cloned" (a fixed platelet must be "cloned" so that the concentration of free ones does not change)
	long timest[N];
	long timestsp[N];


	//how many cycles have passed since the platelet was fixed

	int buffered = 0;		// the number of platelets in the buffer (moving, but not in the calculated zone, but to the right. can be transferred to the settlement zone if the number of free platelets has decreased )
	int svob = 0;			// number of free platelets

	double xyak[N];				// coordinates of anchored platelets (only x and z, since they sit against the wall)
	double zyak[N];

	for (int i = 0; i < N; i++)
	{
		xyak[i] = 0;
		zyak[i] = 0;
		///		contacts[i][0] = -1;
		///		contacts[i][1] = -1;
	}


	for (int j = 0; j < ploschpar; j++)
		for (int i = j * ploschpar; i < ((j * ploschpar) + ploschpar); i++)
		{
			//positioning platelets at the injury

			x[i] = xyakstart + double((i - (j * ploschpar)) * 2 * R);	 // "yak" particles sitting tightly against the wall                  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			y[i] = -R;
			z[i] = 26 - ploschpar1 + double(j * 2 * R);

			zyak[i] = z[i];
			xyak[i] = x[i];

			cloned[i] = false;
			timest[i] = 0;
			timestsp[i] = 0;
			actfactor[i] = 1 + actf1;




		};



	for (int i = yak; i < actN; i++)  // (actN-yak) the remaining platelets are randomly scattered around the vessel
	{
		x[i] = rand() % int(X);
		y[i] = rand() % int(Y);
		z[i] = rand() % int(Z);

		cloned[i] = false;
		timest[i] = 0;
		timestsp[i] = 0;

		actfactor[i] = 1;



	}

	for (int i = actN; i < N; i++)  // platelets that are not initially involved in the calculation are "prepared" to the left of the calculated area
	{
		x[i] = -1;
		y[i] = rand() % int(Y);
		z[i] = rand() % int(Z);

		cloned[i] = false;
		timest[i] = 0;
		timestsp[i] = 0;

		actfactor[i] = 1;


	}

	const double pi = 3.1415926;

	// initialization of the initial coordinates of the springs

	double gama = 0.4;              //  shear rate ( 1 = 1000 1/s )               
	double vmax = gama * (double(Y) / 4);		//  the flow velocity in the center of the vessel

	double px[N];                  // instantaneous particle velocities
	double py[N];
	double pz[N];

	double rr = 0;
	for (int i = 0; i < N; i++)
	{
		rr = y[i] - (Y / 2);									//double(Y) should also be used, it does not affect here
		px[i] = vmax * (1 - (4 * (rr * rr) / (Y * Y)));			// initial particle velocities
		py[i] = 0;
		pz[i] = 0;
	};

	const double m = 4;							// platelet mass with a radius of 1 microns
	const double gam = -3141 * 6;				// viscosity coefficient for particles with a radius of 1 micron ( f = - gam * v   )   v - velocity, f - power                     
	const double gamw = -314 * 8;				// the coefficient of viscosity by rotation for a sphere with a radius of 1 microns ( m = - gamw * w  )   w - angular velocity, m - the moment of viscous friction

	fprintf(par, "gama = %g s-1; m = %g 10^-15 kg; gam = %g 10^-6 Па*с; gamw = %g; \n", double(gama * 1000), m, gam, gamw);
	fclose(par);
	double x1[N];				// auxiliary array of coordinates of platelet centers
	double y1[N];
	double z1[N];

	for (int i = 0; i < N; i++)
	{
		//actfactor[i] = 1;
		x1[i] = x[i];
		y1[i] = y[i];
		z1[i] = z[i];
	};

	double x2[N];				// auxiliary array of coordinates of platelet centers
	double y2[N];
	double z2[N];

	double xs[N];

	double x3[N];				// auxiliary array of coordinates of platelet centers
	double y3[N];
	double z3[N];

	double px2[N];				// velocities
	double py2[N];
	double pz2[N];

	double fdopx[N];			// platelet interaction forces
	double fdopy[N];
	double fdopz[N];

	double fadhx[N];			// forces of attachment to the wall
	double fadhy[N];
	double fadhz[N];

	double fx[N];				// array of forces acting from the flow side (viscous forces)
	double fy[N];
	double fz[N];

	double momz[N];				// the total moment of all forces

	double mnew[N];				// masses

	double fixed[N];

	double rad[N];				// radius

	double fac1new[N];
	double fac2new[N];

	double fac1wnew[N];
	double fac2wnew[N];

	// Outer platelets (on the boundary of the thrombus or in the flow)
	bool outer[N];
	for (int i = 0; i < N; i++)
		outer[i] = true;
	// Here is the graph of platelets. We use it to investigate which platelets belong to the thrombus:
	// That is what we use: https://en.wikipedia.org/wiki/Breadth-first_search:
	bool graph[N][N]; // Array of graph edges
	bool vertex[N]; // Array of vertices of the graph component
	bool vertex_past[N]; // Temporary array for vertices of the previous step
	bool vertex_new[N]; // Temporary array for vertices of the next step
	int vert_new; // Number of new vertices
	int j_min = 0;
	int neighbor[N]; // Number of neighbors.
	for (int i = 0; i < yak; i++)
		neighbor[i] = 0;

	double hhh = 0; //now I use it in the height of the thrombus
	double hhh_in = 0;
	int N_all = 0;
	int N_in = 0;



	for (int i = 0; i < N; i++)
	{
		px2[i] = px[i];
		py2[i] = py[i];
		pz2[i] = pz[i];

		fdopx[i] = 0;
		fdopy[i] = 0;
		fdopz[i] = 0;

		fixed[i] = 0;

		fadhx[i] = 0;
		fadhy[i] = 0;
		fadhz[i] = 0;

		fx[i] = 0;
		fy[i] = 0;
		fz[i] = 0;

		momz[i] = 0;

		x2[i] = x[i] + px[i] * dt;
		y2[i] = y[i] + py[i] * dt;
		z2[i] = z[i] + pz[i] * dt;

		x3[i] = x2[i] + px[i] * dt;
		y3[i] = y2[i] + py[i] * dt;
		z3[i] = z2[i] + pz[i] * dt;

		rad[i] = 1;

	};


	for (int i = 0; i < N; i++)
	{
		mnew[i] = m * rad[i] * rad[i] * rad[i];

		fac1new[i] = 1 - (gam * rad[i] * dt / (2 * mnew[i]));
		fac2new[i] = 1 + (gam * rad[i] * dt / (2 * mnew[i]));

		fac1wnew[i] = 1 - (gamw * rad[i] * dt / (mnew[i]));
		fac2wnew[i] = 1 + (gamw * rad[i] * dt / (mnew[i]));
	};

	double fac1 = 1 - (gam * dt / (2 * m));        // multipliers for the difference scheme
	double fac2 = 1 + (gam * dt / (2 * m));

	double fac1w = 1 - (gamw * dt / (m * R * R));
	double fac2w = 1 + (gamw * dt / (m * R * R));

	double dt2 = dt * dt;

	double l = 0;
	double ll = 0;

	double fpromx = 0;
	double fpromy = 0;
	double fpromz = 0;

	double fpromx2 = 0;
	double fpromy2 = 0;
	double fpromz2 = 0;

	double mpromz1 = 0;
	double mpromz2 = 0;

	double s2 = 0;


	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	// initialization of pointers to file variables for recording coordinates, forces, etc.
	int i1 = 0;
	int j1 = 0;
	int i3 = 0;

	int i5 = 0;
	int j5 = 0;

	double fctr = 1;

	double dx = 0;
	double dy = 0;
	double dz = 0;
	double msp = 0;
	double emsp = 0;

	int numers1[2][nco];
	int numers2[2][nco];

	double ra1[nco];
	double ra2[nco];


	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!              time cycle

	printf("Calculating dynamics of cells..\n");

	int count1 = 0;
	int count2 = 0;
	int count3 = 0;

	int j2 = 0;
	int j3 = 0;

	double coat = 100;
	double ampvelforce = 0;


	for (long int s = 0; s <= T; s++)   // s - number of time steps
	{
		svob = actN - yak; ///svob = 0;
		buffered = 0;
		count3 += 1;
		FxX = 0;

		for (int i = 0; i < actN; i++)
		{
			//calculation of forces from the flow side
			fy[i] = 0;
			rr = y2[i] - (Y / 2);
			fx[i] = -gam * rad[i] * vmax * (1 - (4 * (rr * rr) / (Y * Y)));
			fz[i] = 0;
			//recalculation of new coordinates - through forces

			if (i >= yak)
			{		//the Verlet algorithm
				if (neighbor[i] > 10) fx[i] = 0; //inside the blood clot, the flow is zero

				x3[i] = ((2 * x2[i]) - (x1[i] * fac2new[i]) + ((fx[i] + fdopx[i] + fadhx[i]) * dt2 / mnew[i]));
				x3[i] = x3[i] / fac1new[i];

				y3[i] = ((2 * y2[i]) - (y1[i] * fac2new[i]) + ((fy[i] + fdopy[i] + fadhy[i]) * dt2 / mnew[i]));
				y3[i] = y3[i] / fac1new[i];

				z3[i] = ((2 * z2[i]) - (z1[i] * fac2new[i]) + ((fz[i] + fdopz[i] + fadhz[i]) * dt2 / mnew[i]));
				z3[i] = z3[i] / fac1new[i];


			}

			fdopx[i] = 0;
			fdopy[i] = 0;
			fdopz[i] = 0;

			fadhx[i] = 0;
			fadhy[i] = 0;
			fadhz[i] = 0;

			momz[i] = 0;
			// the velocities are determined through coordinate changes

			px[i] = (x3[i] - x1[i]) / (2 * dt);
			py[i] = (y3[i] - y1[i]) / (2 * dt);
			pz[i] = (z3[i] - z1[i]) / (2 * dt);

		}


		for (int i = 0; i < actN; i++)
		{
			if (x3[i] > X)   //upon departure from the settlement zone
			{
				buffered = buffered + 1;
				svob = svob - 1;// ???
			}


			if ((outer[i] == false) & (x3[i] < X) & (i >= yak))
			{
				svob = svob - 1;
				cloned[i] = false;
			}
			if (xyak[i] > 0)									// calculation of the interaction forces with the wall xyak=0 for non-anchored platelets
			{													
				fadhx[i] = -kadh * (x3[i] - xyak[i]);			// anchored - this is their coordinate
				fadhy[i] = -kadh * (y3[i] - rad[i]);
				fadhz[i] = -kadh * (z3[i] - zyak[i]);
			}
		}

		for (int i = 0; i < actN; i++)

		{

			if (x3[i] < 0)
			{
				x3[i] = -x3[i];
				if (px[i] < 0)
					px[i] = -px[i];

				x2[i] = x3[i] - px[i] * dt;
			}

			if (x3[i] > X)					// these particles are considered "buffer" - they are outside the computational domain, but can be transferred there to maintain the number of free particles
			{
				if (svob < Nfreemax)		// if the "concentration" of free particles is less than the proper
				{
											// place the buffer particle in the calculated area
					svob = svob + 1;
					x3[i] = 0.001;

					buffered = buffered - 1;

					x2[i] = x3[i] - px[i] * dt;

					y3[i] = BigRand();                         //   place the particle in a random place by Y 
					y3[i] = y3[i] * Y / (2 * r_max);
					y2[i] = y3[i];
					z3[i] = BigRand();                         //   place the particle in a random place by Z  
					z3[i] = (Z * 3 / 8) + ((z3[i] * Z / r_max) / 4);
					z2[i] = z3[i];
				}

				cloned[i] = false;
				timest[i] = 0;
				actfactor[i] = 1;
				timestsp[i] = 0;


			}

			if ((outer[i] == false) & (x3[i] < X))
			{
				timest[i] = timest[i] + 1;
				timestsp[i] = timestsp[i] + 1;
				if (i > yak)
				{
					actfactor[i] = 1 + actf1 * (1 - exp(-double(timest[i] / tactscale1)));



				}

				if ((cloned[i] == 0) & (timest[i] > 10000) & (svob < (Nfreemax - 5)) & (buffered == 0))  //не поменяла              //  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				{
					if (s < tfin)
						actN = actN + 1;
					svob = svob + 1;
					cloned[i] = 1;
					printf("%i %i %i %i %i \n", s, actN, svob, i, count2);
				}
			}


			// elastic interaction with the wall

			if (y3[i] < rad[i])
			{
				fdopy[i] = fdopy[i] + (kstenk * (rad[i] - y3[i]));
			}

			if (y3[i] > Y - rad[i])
			{
				fdopy[i] = fdopy[i] + (kstenk * (Y - rad[i] - y3[i]));
			}

			if (z3[i] < rad[i])
			{
				fdopz[i] = fdopz[i] + (kstenk * (rad[i] - z3[i]));
			}

			if (z3[i] > Z - rad[i])
			{
				fdopz[i] = fdopz[i] + (kstenk * (Z - rad[i] - z3[i]));
			}

			s2 = s;
		}

		/*if (fmod(s2, nfac2) == 0)
		{
		fprintf(MorseF1, "*%i\n", int(s / nfac2));
		fprintf(MorseF2, "*%i\n", int(s / nfac2));
		}*/

		//	#pragma omp parallel for private (l,u,v,lpru,kon,mm,ll,kof) //schedule(static,1)

		//  #pragma omp parallel for private(i1,j1,fpromx,fpromy,fpromz,fpromx2,fpromy2,fpromz2,l,ll,llexp,ddx,ddy,ddz) schedule (dynamic,8)

		if ((count3 == recalc) || (s == 0)) //count3 increases each step 
		{
			count1 = 0;
			count2 = 0;

			for (int i = 0; i < nco; i++)
			{
				numers1[0][i] = 0;
				numers1[1][i] = 0;

				numers2[0][i] = 0;
				numers2[1][i] = 0;
			}

			if (count3 == recalc) count3 = 0;

			for (int i1 = 0; i1 < actN; i1++)
			{
				if (x3[i1] < X)
					for (int j1 = i1 + 1; j1 < actN; j1++)
					{
						if (x3[j1] < X)

						{
							dx = (x3[i1] - x3[j1]);
							dy = (y3[i1] - y3[j1]);
							dz = (z3[i1] - z3[j1]);
							l = sqrt((dx * dx) + (dy * dy) + (dz * dz));

							if (l < (rad[i1] + rad[j1]))
							{
								count1 += 1;
								numers1[0][count1 - 1] = i1;

								numers1[1][count1 - 1] = j1;
							}

							if (l < 2.4 * (rad[i3] + rad[j3]))   //Distance
							{
								count2 += 1;
								numers2[0][count2 - 1] = i1;
								numers2[1][count2 - 1] = j1;
							}
						}
					}
			}

			if (count2 > nco) printf(" AAAAAAAAAAAAA perebrali !!!! \n ");
		}

		for (int isp = 0; isp < count1; isp++)
		{
			i3 = numers1[0][isp];
			j3 = numers1[1][isp];

			dx = x3[i3] - x3[j3];
			dy = y3[i3] - y3[j3];
			dz = z3[i3] - z3[j3];

			l = sqrt((dx * dx) + (dy * dy) + (dz * dz));

			if (l < (rad[i3] + rad[j3]))
			{
				if (l == 0)
					printf(" ooooooops!!! \n ");

				msp = kk * (rad[i3] + rad[j3] - l) / l;  // 

				fpromx = msp * dx;
				fpromy = msp * dy;
				fpromz = msp * dz;
				//if (fmod(s2, nfac22) == 0) fprintf(repulsion, "*%i between platelets  fprom = %g nN, l=%g mkm, i=%i j=%i\n", int(s / nfac2), double(sqrt(fpromx * fpromx + fpromy * fpromy + fpromz * fpromz) / 1000000), l, i3, j3);
				//	if (fmod(s2, nfac3) == 0) fprintf(repulsion, "%i %g %g %g %g %g %i %i\n", int(s / nfac), double(fpromx / 1000000), double(fpromy / 1000000), double(fpromz / 1000000), double(sqrt(fpromx * fpromx + fpromy * fpromy + fpromz * fpromz) / 1000000), l, i3, j3);
				fdopx[i3] += fpromx;
				fdopy[i3] += fpromy;
				fdopz[i3] += fpromz;

				fdopx[j3] -= fpromx;
				fdopy[j3] -= fpromy;
				fdopz[j3] -= fpromz;
			}
		}

		for (int isp = 0; isp < count2; isp++)

		{
			i3 = numers2[0][isp];
			j3 = numers2[1][isp];

			dx = x3[i3] - x3[j3];
			dy = y3[i3] - y3[j3];
			dz = z3[i3] - z3[j3];

			l = sqrt((dx * dx) + (dy * dy) + (dz * dz));

			if (l < 2.4 * (rad[i3] + rad[j3]))    //Distance

			{
				if (l == 0)
					printf(" ooooooops!!!   #2 !!! \n ");

				if ((actfactor[i3] > 1.01) & (actfactor[j3] > 1.01))
				{


					fctr = 1;   //   no contraction!!!

					ll = l - (1 * (rad[i3] + rad[j3]) * fctr);

					if ((ll > 0) & (l < 2.4 * (rad[i3] + rad[j3]) * fctr))
					{
						emsp = exp(-c * ll);
						msp = kmorse * actfactor[i3] * actfactor[j3] * 4 * (1 - emsp) * emsp / l;

						fpromx = -msp * dx;
						fpromy = -msp * dy;
						fpromz = -msp * dz;

						fdopx[i3] += fpromx;
						fdopy[i3] += fpromy;
						fdopz[i3] += fpromz;

						fdopx[j3] -= fpromx;
						fdopy[j3] -= fpromy;
						fdopz[j3] -= fpromz;
					}
				}

				else

				{
					ll = l - rad[i3] - rad[j3];

					if (ll > 0)
					{
						emsp = exp(-c * ll);
						msp = damp_fac * kmorse * actfactor[i3] * actfactor[j3] * 4 * (1 - emsp) * emsp / l;

						fpromx = -(msp * dx) - ((px[i3] - px[j3]) * ampvelforce / l);  //ampvelforce=0 now
						fpromy = -(msp * dy) - ((py[i3] - py[j3]) * ampvelforce / l);;
						fpromz = -(msp * dz) - ((pz[i3] - pz[j3]) * ampvelforce / l);

						//	if (fmod(s2, nfac3) == 0)
						//	{
						//		fprintf(MorseF2, "%i %g %g %g %g %g %i %i %g %g %g\n", int(s / nfac), double(fpromx / 1000000), double(fpromy / 1000000), double(fpromz / 1000000 ), double(sqrt(fpromx * fpromx + fpromy * fpromy + fpromz * fpromz) / 1000000), ll, i3, j3, actfactor[i3], actfactor[j3], l);
						//	}
						fdopx[i3] += fpromx;
						fdopy[i3] += fpromy;
						fdopz[i3] += fpromz;

						fdopx[j3] -= fpromx;
						fdopy[j3] -= fpromy;
						fdopz[j3] -= fpromz;
					}
				}
			}

		}


		/*SLayer = 0;
		for (int i = yak; i < actN; i++)
		{
			if ((x3[i] > xyakstart - 1) & (x3[i] < xyakstart + ploschpar1*2+1) & (y3[i] < 1.2)& (y3[i] > 0)& (z3[i] > 25 - ploschpar1)& (z3[i] < 27+ ploschpar1))
			{
				SLayer = SLayer + 1;
			}
		}
		fprintf(secondlayer, " %i \n", SLayer);*/

		//Graphs        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		/*
		*/
		// Calculate external/internal platelets!
		if (fmod(s2, nfac2) == 0) //the remainder of the division 
		{ // we do not want to recalculate it each step
			// BFS to find the platelets of the trombus
			// Each platelet is a vertex of the graph
			// If platelets are close to each other then the edge between vertices exists
			// BFS is used to find connected component (that is the thrombus)
			// Clear arrays and variables:
			for (int j = 0; j < actN; j++)
			{
				vertex[j] = false;
				vertex_past[j] = false;
				vertex_new[j] = false;
				for (int k = 0; k < actN; k++)
					graph[j][k] = false;
				neighbor[j] = 0;
			}
			// Graph initialization:
			for (int k = 0; k < actN; k++)
				for (int l = k; l < actN; l++)
				{
					// we do not take into account particles in buffer      
					if ((((x3[k] - x3[l]) * (x3[k] - x3[l]) + (y3[k] - y3[l]) * (y3[k] - y3[l]) + (z3[k] - z3[l]) * (z3[k] - z3[l])) <= (1.5 * (rad[l] + rad[k]) * 1.5 * (rad[l] + rad[k]))) && (x3[k] > 0) && (x3[l] > 0) && (x3[k] < X) && (x3[l] < X))
					{
						graph[k][l] = true;
						graph[l][k] = true;
					}
				}
			// Start point for breadth-first search:
			vertex_past[0] = true;
			vertex[0] = true;
			vert_new = 1;
			//Breadth-first search:
			while (vert_new > 0)
			{
				vert_new = 0;
				for (int k = 0; k < actN; k++)
				{
					if (vertex_past[k] == true) // If vertex was added on the previous step
					{
						for (int l = 0; l < actN; l++)
						{
							if ((graph[k][l] == true) && (vertex[l] == false)) // If l is new neighbor
							{
								vert_new += 1; // New vertex found
								vertex_new[l] = true; // Add to queue
							}
						}
					}
				}
				// Getting ready for the next step:
				for (int k = 0; k < actN; k++)
				{
					if (vertex_new[k] == true)
					{
						vertex_past[k] = true; // Copy queue
						vertex[k] = true; // This vertex is in component
						vertex_new[k] = false; // Clear
					}
					else
					{
						vertex_past[k] = false; // Not in queue
					}
				}
			} // while ends!!!
			for (int i = 0; i < actN; i++)
			{
				if (vertex[i] == true)
				{
					outer[i] = false;
				}

				else
				{
					outer[i] = true;
					//svob = svob + 1;
					//cloned[i] = false;
				}
			}
			for (int i = 0; i < actN; i++)
			{	// We do not calculate forces between two virtual (initially adhered)
				// platelets, that is why:
				/*if (yak > i + 1)
				j_min = yak;
				else*/
				j_min = i + 1;

				for (int j = j_min; j < actN; j++)
				{

					l = sqrt(((x3[i] - x3[j]) * (x3[i] - x3[j])) + ((y3[i] - y3[j]) * (y3[i] - y3[j])) + ((z3[i] - z3[j]) * (z3[i] - z3[j])));

					if ((outer[i] == false) & (outer[j] == false))//if (i >= yak)  // Do not take into accout virtual platelets.
						if (l < (1.2 * (rad[i] + rad[j])))  // Close neigbours.    //Distance
						{
							neighbor[i] += 1;
							neighbor[j] += 1;
						}
				}
			}

		}

		for (int i = yak; i < N; i++)
		{
			if ((x3[i] > 1) && (x3[i] < 149) && (actfactor[i] > 1.01))
			{
				activPlat[i] = true;
			}
			else
			{
				activPlat[i] = false;
			}
		}

		FxX = 0.;
		FxX_true = 0.;

		for (int i = yak; i < N; i++)
		{
			FxX = FxX + fx[i] * double(activPlat[i]);
			FxX_true += fx[i] * double(activPlat[i]) * double(outer[i]);
		}

		if (fmod(s2, nfac2) == 0)
		{
			fprintf(trombuspower, "%g %g %g \n", double(s * dt / 1000), FxX, FxX_true);
		}


		// preparing for a new cycle: the present becomes the past

		for (int i = 0; i < actN; i++)
		{
			x1[i] = x2[i];
			y1[i] = y2[i];
			z1[i] = z2[i];

			x2[i] = x3[i];
			y2[i] = y3[i];
			z2[i] = z3[i];
		}


		if (fmod(s2, nfac2) == 0)  //the remainder of the division of the first by the second
		{
			printf(" %i \n", s);
			// recording the current coordinates of the particles in a file is for later. visualizations

			fprintf(ou, "* %i \n", int(s / nfac2));

			fprintf(ouu, "* %i \n", int(s / nfac2));


			for (int i = 0; i < N; i++)
			{
				fprintf(ou, " %g %g %g \n", x2[i], y2[i], z2[i]);

				if (((timest[i] > 0) & (outer[i] == false)) || (i < yak)) //at the injury
				{
					fprintf(ouu, "%i %i ", i, int(s / nfac2));
					fprintf(ouu, "%g 150 255 \n", (actfactor[i] * 255 / (1 + actf1)));
				}
				else //if ((actfactor[i] > 0.9)& (actfactor[i] < 1.1))
				{
					fprintf(ouu, "%i %i 255 255 255 \n", i, int(s / nfac2));

				}   // colour 255 150 255 - violet ; 0 150 255 - blue ; 0 150 100 green ; 255 150 100 orange
				// colour  255 255 255 white 

			}
		}
		if (fmod(s2, nfac2) == 0)
		{
			SLayer = 0;
			for (int i = yak; i < actN; i++)
			{
				if ((x3[i] > xyakstart - 1) & (x3[i] < xyakstart + ploschpar1 * 2 + 1) & (y3[i] < 1.2) & (y3[i] > 0) & (z3[i] > 25 - ploschpar1) & (z3[i] < 27 + ploschpar1))
				{
					SLayer = SLayer + 1;
				}
			}
			fprintf(secondlayer, "%g %i \n", double(s * dt / 1000), SLayer);
		}

		if (fmod(s2, nfac2) == 0)
		{
			fprintf(ou, "\n");
		}

		if (fmod(s2, nfac2) == 0)
		{
			hhh = 0;
			hhh_in = 0;
			for (int i = 0; i < actN; i++)
			{
				if ((outer[i] == false) & (y3[i] > hhh))
					hhh = y3[i];
				if ((outer[i] == false) & (neighbor[i] > 10) & (y3[i] > hhh_in))
					hhh_in = y3[i];
			}
			fprintf(height, "%g %g %g\n", double(s * dt / 1000), hhh, hhh_in); //we output the parameters of the height of the thrombus from time

		}
		//   N_all = 0  N_in = 0;
		if (fmod(s2, nfac2) == 0)
		{
			N_all = 0;
			N_in = 0;
			for (int i = 0; i < actN; i++)
			{
				if (outer[i] == false)
					N_all = N_all + 1;
				if ((outer[i] == false) & (neighbor[i] > 10)) 
					N_in = N_in + 1;
			}
			fprintf(quantity, "%g %i %i\n", double(s * dt / 1000), N_all, N_in);
		}

		if (fmod(s2, nfac3) == 0)
		{
			for (int i = 0; i < N; i++)
			{
				xs[i] = x3[i];
			}
		}

		if (s == T)
		{

			for (int i = 0; i < N; i++)
			{
				fprintf(coord1, "%g %g %g\n", x1[i], y1[i], z1[i]);
				fprintf(coord2, "%g %g %g \n", x2[i], y2[i], z2[i]);
				fprintf(vels, "%g %g %g \n", px[i], py[i], pz[i]);
				fprintf(time1, "%ld \n", timest[i]);
				fprintf(time2, "%ld \n", timestsp[i]);
				fprintf(cloning, "%g \n", cloned[i]);
			}

			fprintf(particles, "%i \n", actN); //svob  buffered

			for (int i = yak; i < actN; i++)
			{
				if (outer[i] == false)
					fprintf(width, "%g %g %g %g \n", x3[i], y3[i], z3[i], actfactor[i]);
			}

		}

	}


	fclose(ou);
	fclose(ouu);
	fclose(coord1);
	fclose(coord2);
	fclose(vels);
	fclose(time1);
	fclose(time2);
	fclose(cloning);


	fclose(height);
	fclose(width);
	fclose(quantity);

	fclose(spring_f);

	fclose(particles);
	fclose(repulsion);
	fclose(MorseF1);
	fclose(MorseF2);

	//printf ("done ! " );

	printf(" %i %i\n", svob, buffered);

	return 0;
}